# docker-compose.yml (updated)
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  postgres:
    image: postgis/postgis:15-3.3
    container_name: ingres_postgres
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-postgis_35_SIH}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-nameless1014}"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ingres_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgis_35_SIH} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: ingres_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ingres_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mcp_server:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PIP_DEFAULT_TIMEOUT: "100"
    container_name: ingres_mcp_server
    env_file:
      - ./.env             # <<< <-- use root .env (project root: ingres-mcp-chatbot/.env)
    environment:
      - POSTGIS_HOST=postgres
      - POSTGIS_PORT=5432
      - REDIS_URL=redis://redis:6379
      - PIP_DEFAULT_TIMEOUT=${PIP_DEFAULT_TIMEOUT:-100}
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads:rw
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    depends_on:
      - postgres
      - redis
    networks:
      - ingres_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1024M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: ingres_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_MCP_SERVER_URL=${REACT_APP_MCP_SERVER_URL:-http://mcp_server:8000}
    depends_on:
      - mcp_server
    networks:
      - ingres_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  nginx:
    image: nginx:alpine
    container_name: ingres_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - mcp_server
    networks:
      - ingres_network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && wget --quiet --tries=1 --spider http://localhost || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 20s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ingres_network:
    driver: bridge
